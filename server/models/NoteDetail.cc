/**
 *
 *  NoteDetail.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "NoteDetail.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::travelapp;

const std::string NoteDetail::Cols::_nid = "nid";
const std::string NoteDetail::Cols::_background = "background";
const std::string NoteDetail::Cols::_uid = "uid";
const std::string NoteDetail::Cols::_time = "time";
const std::string NoteDetail::Cols::_title = "title";
const std::string NoteDetail::Cols::_content = "content";
const std::string NoteDetail::primaryKeyName = "nid";
const bool NoteDetail::hasPrimaryKey = true;
const std::string NoteDetail::tableName = "note_detail";

const std::vector<typename NoteDetail::MetaData> NoteDetail::metaData_={
{"nid","int32_t","integer",4,0,1,1},
{"background","std::string","text",0,0,0,1},
{"uid","int32_t","integer",4,0,0,1},
{"time","::trantor::Date","date",0,0,0,1},
{"title","std::string","text",0,0,0,1},
{"content","std::string","json",0,0,0,1}
};
const std::string &NoteDetail::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
NoteDetail::NoteDetail(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["nid"].isNull())
        {
            nid_=std::make_shared<int32_t>(r["nid"].as<int32_t>());
        }
        if(!r["background"].isNull())
        {
            background_=std::make_shared<std::string>(r["background"].as<std::string>());
        }
        if(!r["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>(r["uid"].as<int32_t>());
        }
        if(!r["time"].isNull())
        {
            auto daysStr = r["time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            nid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            background_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            uid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

NoteDetail::NoteDetail(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            nid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            background_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

NoteDetail::NoteDetail(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("nid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["nid"].isNull())
        {
            nid_=std::make_shared<int32_t>((int32_t)pJson["nid"].asInt64());
        }
    }
    if(pJson.isMember("background"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["background"].isNull())
        {
            background_=std::make_shared<std::string>(pJson["background"].asString());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["time"].isNull())
        {
            auto daysStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
}

void NoteDetail::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            nid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            background_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void NoteDetail::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("nid"))
    {
        if(!pJson["nid"].isNull())
        {
            nid_=std::make_shared<int32_t>((int32_t)pJson["nid"].asInt64());
        }
    }
    if(pJson.isMember("background"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["background"].isNull())
        {
            background_=std::make_shared<std::string>(pJson["background"].asString());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["time"].isNull())
        {
            auto daysStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            time_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
}

const int32_t &NoteDetail::getValueOfNid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(nid_)
        return *nid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NoteDetail::getNid() const noexcept
{
    return nid_;
}
void NoteDetail::setNid(const int32_t &pNid) noexcept
{
    nid_ = std::make_shared<int32_t>(pNid);
    dirtyFlag_[0] = true;
}
const typename NoteDetail::PrimaryKeyType & NoteDetail::getPrimaryKey() const
{
    assert(nid_);
    return *nid_;
}

const std::string &NoteDetail::getValueOfBackground() const noexcept
{
    const static std::string defaultValue = std::string();
    if(background_)
        return *background_;
    return defaultValue;
}
const std::shared_ptr<std::string> &NoteDetail::getBackground() const noexcept
{
    return background_;
}
void NoteDetail::setBackground(const std::string &pBackground) noexcept
{
    background_ = std::make_shared<std::string>(pBackground);
    dirtyFlag_[1] = true;
}
void NoteDetail::setBackground(std::string &&pBackground) noexcept
{
    background_ = std::make_shared<std::string>(std::move(pBackground));
    dirtyFlag_[1] = true;
}

const int32_t &NoteDetail::getValueOfUid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(uid_)
        return *uid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NoteDetail::getUid() const noexcept
{
    return uid_;
}
void NoteDetail::setUid(const int32_t &pUid) noexcept
{
    uid_ = std::make_shared<int32_t>(pUid);
    dirtyFlag_[2] = true;
}

const ::trantor::Date &NoteDetail::getValueOfTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(time_)
        return *time_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &NoteDetail::getTime() const noexcept
{
    return time_;
}
void NoteDetail::setTime(const ::trantor::Date &pTime) noexcept
{
    time_ = std::make_shared<::trantor::Date>(pTime.roundDay());
    dirtyFlag_[3] = true;
}

const std::string &NoteDetail::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &NoteDetail::getTitle() const noexcept
{
    return title_;
}
void NoteDetail::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[4] = true;
}
void NoteDetail::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[4] = true;
}

const std::string &NoteDetail::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &NoteDetail::getContent() const noexcept
{
    return content_;
}
void NoteDetail::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[5] = true;
}
void NoteDetail::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[5] = true;
}

void NoteDetail::updateId(const uint64_t id)
{
}

const std::vector<std::string> &NoteDetail::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "nid",
        "background",
        "uid",
        "time",
        "title",
        "content"
    };
    return inCols;
}

void NoteDetail::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNid())
        {
            binder << getValueOfNid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBackground())
        {
            binder << getValueOfBackground();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> NoteDetail::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void NoteDetail::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNid())
        {
            binder << getValueOfNid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBackground())
        {
            binder << getValueOfBackground();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value NoteDetail::toJson() const
{
    Json::Value ret;
    if(getNid())
    {
        ret["nid"]=getValueOfNid();
    }
    else
    {
        ret["nid"]=Json::Value();
    }
    if(getBackground())
    {
        ret["background"]=getValueOfBackground();
    }
    else
    {
        ret["background"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    return ret;
}

Json::Value NoteDetail::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getNid())
            {
                ret[pMasqueradingVector[0]]=getValueOfNid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBackground())
            {
                ret[pMasqueradingVector[1]]=getValueOfBackground();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUid())
            {
                ret[pMasqueradingVector[2]]=getValueOfUid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTime())
            {
                ret[pMasqueradingVector[3]]=getTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[4]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[5]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getNid())
    {
        ret["nid"]=getValueOfNid();
    }
    else
    {
        ret["nid"]=Json::Value();
    }
    if(getBackground())
    {
        ret["background"]=getValueOfBackground();
    }
    else
    {
        ret["background"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    return ret;
}

bool NoteDetail::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("nid"))
    {
        if(!validJsonOfField(0, "nid", pJson["nid"], err, true))
            return false;
    }
    else
    {
        err="The nid column cannot be null";
        return false;
    }
    if(pJson.isMember("background"))
    {
        if(!validJsonOfField(1, "background", pJson["background"], err, true))
            return false;
    }
    else
    {
        err="The background column cannot be null";
        return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, true))
            return false;
    }
    else
    {
        err="The uid column cannot be null";
        return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(3, "time", pJson["time"], err, true))
            return false;
    }
    else
    {
        err="The time column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(4, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, true))
            return false;
    }
    else
    {
        err="The content column cannot be null";
        return false;
    }
    return true;
}
bool NoteDetail::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool NoteDetail::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("nid"))
    {
        if(!validJsonOfField(0, "nid", pJson["nid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("background"))
    {
        if(!validJsonOfField(1, "background", pJson["background"], err, false))
            return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, false))
            return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(3, "time", pJson["time"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(4, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, false))
            return false;
    }
    return true;
}
bool NoteDetail::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool NoteDetail::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
