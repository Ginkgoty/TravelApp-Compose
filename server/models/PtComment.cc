/**
 *
 *  PtComment.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PtComment.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::travelapp;

const std::string PtComment::Cols::_cid = "cid";
const std::string PtComment::Cols::_ptid = "ptid";
const std::string PtComment::Cols::_uid = "uid";
const std::string PtComment::Cols::_datetime = "datetime";
const std::string PtComment::Cols::_belong = "belong";
const std::string PtComment::Cols::_comment = "comment";
const std::string PtComment::primaryKeyName = "cid";
const bool PtComment::hasPrimaryKey = true;
const std::string PtComment::tableName = "pt_comment";

const std::vector<typename PtComment::MetaData> PtComment::metaData_={
{"cid","int32_t","integer",4,0,1,1},
{"ptid","int32_t","integer",4,0,0,1},
{"uid","int32_t","integer",4,0,0,1},
{"datetime","::trantor::Date","date",0,0,0,1},
{"belong","int32_t","integer",4,0,0,1},
{"comment","std::string","character varying",255,0,0,1}
};
const std::string &PtComment::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PtComment::PtComment(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["cid"].isNull())
        {
            cid_=std::make_shared<int32_t>(r["cid"].as<int32_t>());
        }
        if(!r["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>(r["ptid"].as<int32_t>());
        }
        if(!r["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>(r["uid"].as<int32_t>());
        }
        if(!r["datetime"].isNull())
        {
            auto daysStr = r["datetime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["belong"].isNull())
        {
            belong_=std::make_shared<int32_t>(r["belong"].as<int32_t>());
        }
        if(!r["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(r["comment"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            cid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            ptid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            uid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            belong_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            comment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

PtComment::PtComment(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            cid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            belong_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            comment_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

PtComment::PtComment(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("cid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["cid"].isNull())
        {
            cid_=std::make_shared<int32_t>((int32_t)pJson["cid"].asInt64());
        }
    }
    if(pJson.isMember("ptid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("datetime"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["datetime"].isNull())
        {
            auto daysStr = pJson["datetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("belong"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["belong"].isNull())
        {
            belong_=std::make_shared<int32_t>((int32_t)pJson["belong"].asInt64());
        }
    }
    if(pJson.isMember("comment"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(pJson["comment"].asString());
        }
    }
}

void PtComment::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            cid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            belong_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            comment_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void PtComment::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("cid"))
    {
        if(!pJson["cid"].isNull())
        {
            cid_=std::make_shared<int32_t>((int32_t)pJson["cid"].asInt64());
        }
    }
    if(pJson.isMember("ptid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("datetime"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["datetime"].isNull())
        {
            auto daysStr = pJson["datetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("belong"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["belong"].isNull())
        {
            belong_=std::make_shared<int32_t>((int32_t)pJson["belong"].asInt64());
        }
    }
    if(pJson.isMember("comment"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(pJson["comment"].asString());
        }
    }
}

const int32_t &PtComment::getValueOfCid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(cid_)
        return *cid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtComment::getCid() const noexcept
{
    return cid_;
}
void PtComment::setCid(const int32_t &pCid) noexcept
{
    cid_ = std::make_shared<int32_t>(pCid);
    dirtyFlag_[0] = true;
}
const typename PtComment::PrimaryKeyType & PtComment::getPrimaryKey() const
{
    assert(cid_);
    return *cid_;
}

const int32_t &PtComment::getValueOfPtid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(ptid_)
        return *ptid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtComment::getPtid() const noexcept
{
    return ptid_;
}
void PtComment::setPtid(const int32_t &pPtid) noexcept
{
    ptid_ = std::make_shared<int32_t>(pPtid);
    dirtyFlag_[1] = true;
}

const int32_t &PtComment::getValueOfUid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(uid_)
        return *uid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtComment::getUid() const noexcept
{
    return uid_;
}
void PtComment::setUid(const int32_t &pUid) noexcept
{
    uid_ = std::make_shared<int32_t>(pUid);
    dirtyFlag_[2] = true;
}

const ::trantor::Date &PtComment::getValueOfDatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(datetime_)
        return *datetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PtComment::getDatetime() const noexcept
{
    return datetime_;
}
void PtComment::setDatetime(const ::trantor::Date &pDatetime) noexcept
{
    datetime_ = std::make_shared<::trantor::Date>(pDatetime.roundDay());
    dirtyFlag_[3] = true;
}

const int32_t &PtComment::getValueOfBelong() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(belong_)
        return *belong_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtComment::getBelong() const noexcept
{
    return belong_;
}
void PtComment::setBelong(const int32_t &pBelong) noexcept
{
    belong_ = std::make_shared<int32_t>(pBelong);
    dirtyFlag_[4] = true;
}

const std::string &PtComment::getValueOfComment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comment_)
        return *comment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtComment::getComment() const noexcept
{
    return comment_;
}
void PtComment::setComment(const std::string &pComment) noexcept
{
    comment_ = std::make_shared<std::string>(pComment);
    dirtyFlag_[5] = true;
}
void PtComment::setComment(std::string &&pComment) noexcept
{
    comment_ = std::make_shared<std::string>(std::move(pComment));
    dirtyFlag_[5] = true;
}

void PtComment::updateId(const uint64_t id)
{
}

const std::vector<std::string> &PtComment::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "cid",
        "ptid",
        "uid",
        "datetime",
        "belong",
        "comment"
    };
    return inCols;
}

void PtComment::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCid())
        {
            binder << getValueOfCid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getBelong())
        {
            binder << getValueOfBelong();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComment())
        {
            binder << getValueOfComment();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PtComment::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void PtComment::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCid())
        {
            binder << getValueOfCid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getBelong())
        {
            binder << getValueOfBelong();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComment())
        {
            binder << getValueOfComment();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PtComment::toJson() const
{
    Json::Value ret;
    if(getCid())
    {
        ret["cid"]=getValueOfCid();
    }
    else
    {
        ret["cid"]=Json::Value();
    }
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["datetime"]=getDatetime()->toDbStringLocal();
    }
    else
    {
        ret["datetime"]=Json::Value();
    }
    if(getBelong())
    {
        ret["belong"]=getValueOfBelong();
    }
    else
    {
        ret["belong"]=Json::Value();
    }
    if(getComment())
    {
        ret["comment"]=getValueOfComment();
    }
    else
    {
        ret["comment"]=Json::Value();
    }
    return ret;
}

Json::Value PtComment::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCid())
            {
                ret[pMasqueradingVector[0]]=getValueOfCid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPtid())
            {
                ret[pMasqueradingVector[1]]=getValueOfPtid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUid())
            {
                ret[pMasqueradingVector[2]]=getValueOfUid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDatetime())
            {
                ret[pMasqueradingVector[3]]=getDatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getBelong())
            {
                ret[pMasqueradingVector[4]]=getValueOfBelong();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getComment())
            {
                ret[pMasqueradingVector[5]]=getValueOfComment();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCid())
    {
        ret["cid"]=getValueOfCid();
    }
    else
    {
        ret["cid"]=Json::Value();
    }
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["datetime"]=getDatetime()->toDbStringLocal();
    }
    else
    {
        ret["datetime"]=Json::Value();
    }
    if(getBelong())
    {
        ret["belong"]=getValueOfBelong();
    }
    else
    {
        ret["belong"]=Json::Value();
    }
    if(getComment())
    {
        ret["comment"]=getValueOfComment();
    }
    else
    {
        ret["comment"]=Json::Value();
    }
    return ret;
}

bool PtComment::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("cid"))
    {
        if(!validJsonOfField(0, "cid", pJson["cid"], err, true))
            return false;
    }
    else
    {
        err="The cid column cannot be null";
        return false;
    }
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(1, "ptid", pJson["ptid"], err, true))
            return false;
    }
    else
    {
        err="The ptid column cannot be null";
        return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, true))
            return false;
    }
    else
    {
        err="The uid column cannot be null";
        return false;
    }
    if(pJson.isMember("datetime"))
    {
        if(!validJsonOfField(3, "datetime", pJson["datetime"], err, true))
            return false;
    }
    else
    {
        err="The datetime column cannot be null";
        return false;
    }
    if(pJson.isMember("belong"))
    {
        if(!validJsonOfField(4, "belong", pJson["belong"], err, true))
            return false;
    }
    else
    {
        err="The belong column cannot be null";
        return false;
    }
    if(pJson.isMember("comment"))
    {
        if(!validJsonOfField(5, "comment", pJson["comment"], err, true))
            return false;
    }
    else
    {
        err="The comment column cannot be null";
        return false;
    }
    return true;
}
bool PtComment::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtComment::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("cid"))
    {
        if(!validJsonOfField(0, "cid", pJson["cid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(1, "ptid", pJson["ptid"], err, false))
            return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, false))
            return false;
    }
    if(pJson.isMember("datetime"))
    {
        if(!validJsonOfField(3, "datetime", pJson["datetime"], err, false))
            return false;
    }
    if(pJson.isMember("belong"))
    {
        if(!validJsonOfField(4, "belong", pJson["belong"], err, false))
            return false;
    }
    if(pJson.isMember("comment"))
    {
        if(!validJsonOfField(5, "comment", pJson["comment"], err, false))
            return false;
    }
    return true;
}
bool PtComment::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtComment::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
