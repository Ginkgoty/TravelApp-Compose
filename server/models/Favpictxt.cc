/**
 *
 *  Favpictxt.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Favpictxt.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::travelapp;

const std::string Favpictxt::Cols::_uid = "uid";
const std::string Favpictxt::Cols::_ptid = "ptid";
const std::vector<std::string> Favpictxt::primaryKeyName = {"uid","ptid"};
const bool Favpictxt::hasPrimaryKey = true;
const std::string Favpictxt::tableName = "favpictxt";

const std::vector<typename Favpictxt::MetaData> Favpictxt::metaData_={
{"uid","int32_t","integer",4,0,1,1},
{"ptid","int32_t","integer",4,0,1,1}
};
const std::string &Favpictxt::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Favpictxt::Favpictxt(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>(r["uid"].as<int32_t>());
        }
        if(!r["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>(r["ptid"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            uid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            ptid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Favpictxt::Favpictxt(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

Favpictxt::Favpictxt(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("ptid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
}

void Favpictxt::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void Favpictxt::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("uid"))
    {
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("ptid"))
    {
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
}

const int32_t &Favpictxt::getValueOfUid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(uid_)
        return *uid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Favpictxt::getUid() const noexcept
{
    return uid_;
}
void Favpictxt::setUid(const int32_t &pUid) noexcept
{
    uid_ = std::make_shared<int32_t>(pUid);
    dirtyFlag_[0] = true;
}

const int32_t &Favpictxt::getValueOfPtid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(ptid_)
        return *ptid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Favpictxt::getPtid() const noexcept
{
    return ptid_;
}
void Favpictxt::setPtid(const int32_t &pPtid) noexcept
{
    ptid_ = std::make_shared<int32_t>(pPtid);
    dirtyFlag_[1] = true;
}

void Favpictxt::updateId(const uint64_t id)
{
}
typename Favpictxt::PrimaryKeyType Favpictxt::getPrimaryKey() const
{
    return std::make_tuple(*uid_,*ptid_);
}

const std::vector<std::string> &Favpictxt::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "uid",
        "ptid"
    };
    return inCols;
}

void Favpictxt::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Favpictxt::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Favpictxt::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Favpictxt::toJson() const
{
    Json::Value ret;
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    return ret;
}

Json::Value Favpictxt::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUid())
            {
                ret[pMasqueradingVector[0]]=getValueOfUid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPtid())
            {
                ret[pMasqueradingVector[1]]=getValueOfPtid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    return ret;
}

bool Favpictxt::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(0, "uid", pJson["uid"], err, true))
            return false;
    }
    else
    {
        err="The uid column cannot be null";
        return false;
    }
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(1, "ptid", pJson["ptid"], err, true))
            return false;
    }
    else
    {
        err="The ptid column cannot be null";
        return false;
    }
    return true;
}
bool Favpictxt::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Favpictxt::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(0, "uid", pJson["uid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(1, "ptid", pJson["ptid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Favpictxt::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Favpictxt::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
