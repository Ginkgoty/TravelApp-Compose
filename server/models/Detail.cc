/**
 *
 *  Detail.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Detail.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::travelapp;

const std::string Detail::Cols::_sid = "sid";
const std::string Detail::Cols::_intro = "intro";
const std::string Detail::Cols::_tel = "tel";
const std::string Detail::Cols::_consumption = "consumption";
const std::string Detail::Cols::_traffic = "traffic";
const std::string Detail::Cols::_ticket = "ticket";
const std::string Detail::Cols::_openness = "openness";
const std::string Detail::Cols::_pic1 = "pic1";
const std::string Detail::Cols::_pic2 = "pic2";
const std::string Detail::Cols::_pic3 = "pic3";
const std::string Detail::Cols::_location = "location";
const std::string Detail::Cols::_lat = "lat";
const std::string Detail::Cols::_lng = "lng";
const std::string Detail::primaryKeyName = "sid";
const bool Detail::hasPrimaryKey = true;
const std::string Detail::tableName = "detail";

const std::vector<typename Detail::MetaData> Detail::metaData_={
{"sid","int32_t","integer",4,0,1,1},
{"intro","std::string","text",0,0,0,1},
{"tel","std::string","character varying",255,0,0,1},
{"consumption","std::string","character varying",255,0,0,1},
{"traffic","std::string","text",0,0,0,1},
{"ticket","std::string","text",0,0,0,1},
{"openness","std::string","text",0,0,0,1},
{"pic1","std::string","character varying",255,0,0,1},
{"pic2","std::string","character varying",255,0,0,1},
{"pic3","std::string","character varying",255,0,0,1},
{"location","std::string","character varying",255,0,0,1},
{"lat","std::string","numeric",0,0,0,1},
{"lng","std::string","numeric",0,0,0,1}
};
const std::string &Detail::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Detail::Detail(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["sid"].isNull())
        {
            sid_=std::make_shared<int32_t>(r["sid"].as<int32_t>());
        }
        if(!r["intro"].isNull())
        {
            intro_=std::make_shared<std::string>(r["intro"].as<std::string>());
        }
        if(!r["tel"].isNull())
        {
            tel_=std::make_shared<std::string>(r["tel"].as<std::string>());
        }
        if(!r["consumption"].isNull())
        {
            consumption_=std::make_shared<std::string>(r["consumption"].as<std::string>());
        }
        if(!r["traffic"].isNull())
        {
            traffic_=std::make_shared<std::string>(r["traffic"].as<std::string>());
        }
        if(!r["ticket"].isNull())
        {
            ticket_=std::make_shared<std::string>(r["ticket"].as<std::string>());
        }
        if(!r["openness"].isNull())
        {
            openness_=std::make_shared<std::string>(r["openness"].as<std::string>());
        }
        if(!r["pic1"].isNull())
        {
            pic1_=std::make_shared<std::string>(r["pic1"].as<std::string>());
        }
        if(!r["pic2"].isNull())
        {
            pic2_=std::make_shared<std::string>(r["pic2"].as<std::string>());
        }
        if(!r["pic3"].isNull())
        {
            pic3_=std::make_shared<std::string>(r["pic3"].as<std::string>());
        }
        if(!r["location"].isNull())
        {
            location_=std::make_shared<std::string>(r["location"].as<std::string>());
        }
        if(!r["lat"].isNull())
        {
            lat_=std::make_shared<std::string>(r["lat"].as<std::string>());
        }
        if(!r["lng"].isNull())
        {
            lng_=std::make_shared<std::string>(r["lng"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            sid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            intro_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            tel_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            consumption_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            traffic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            ticket_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            openness_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            pic1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            pic2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            pic3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            location_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            lat_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            lng_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Detail::Detail(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            sid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            intro_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tel_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            consumption_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            traffic_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ticket_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            openness_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            pic1_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            pic2_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            pic3_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            location_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            lat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            lng_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

Detail::Detail(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("sid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["sid"].isNull())
        {
            sid_=std::make_shared<int32_t>((int32_t)pJson["sid"].asInt64());
        }
    }
    if(pJson.isMember("intro"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["intro"].isNull())
        {
            intro_=std::make_shared<std::string>(pJson["intro"].asString());
        }
    }
    if(pJson.isMember("tel"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["tel"].isNull())
        {
            tel_=std::make_shared<std::string>(pJson["tel"].asString());
        }
    }
    if(pJson.isMember("consumption"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["consumption"].isNull())
        {
            consumption_=std::make_shared<std::string>(pJson["consumption"].asString());
        }
    }
    if(pJson.isMember("traffic"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["traffic"].isNull())
        {
            traffic_=std::make_shared<std::string>(pJson["traffic"].asString());
        }
    }
    if(pJson.isMember("ticket"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["ticket"].isNull())
        {
            ticket_=std::make_shared<std::string>(pJson["ticket"].asString());
        }
    }
    if(pJson.isMember("openness"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["openness"].isNull())
        {
            openness_=std::make_shared<std::string>(pJson["openness"].asString());
        }
    }
    if(pJson.isMember("pic1"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["pic1"].isNull())
        {
            pic1_=std::make_shared<std::string>(pJson["pic1"].asString());
        }
    }
    if(pJson.isMember("pic2"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["pic2"].isNull())
        {
            pic2_=std::make_shared<std::string>(pJson["pic2"].asString());
        }
    }
    if(pJson.isMember("pic3"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["pic3"].isNull())
        {
            pic3_=std::make_shared<std::string>(pJson["pic3"].asString());
        }
    }
    if(pJson.isMember("location"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["location"].isNull())
        {
            location_=std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if(pJson.isMember("lat"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["lat"].isNull())
        {
            lat_=std::make_shared<std::string>(pJson["lat"].asString());
        }
    }
    if(pJson.isMember("lng"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["lng"].isNull())
        {
            lng_=std::make_shared<std::string>(pJson["lng"].asString());
        }
    }
}

void Detail::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            sid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            intro_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tel_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            consumption_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            traffic_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ticket_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            openness_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            pic1_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            pic2_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            pic3_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            location_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            lat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            lng_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

void Detail::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("sid"))
    {
        if(!pJson["sid"].isNull())
        {
            sid_=std::make_shared<int32_t>((int32_t)pJson["sid"].asInt64());
        }
    }
    if(pJson.isMember("intro"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["intro"].isNull())
        {
            intro_=std::make_shared<std::string>(pJson["intro"].asString());
        }
    }
    if(pJson.isMember("tel"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["tel"].isNull())
        {
            tel_=std::make_shared<std::string>(pJson["tel"].asString());
        }
    }
    if(pJson.isMember("consumption"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["consumption"].isNull())
        {
            consumption_=std::make_shared<std::string>(pJson["consumption"].asString());
        }
    }
    if(pJson.isMember("traffic"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["traffic"].isNull())
        {
            traffic_=std::make_shared<std::string>(pJson["traffic"].asString());
        }
    }
    if(pJson.isMember("ticket"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["ticket"].isNull())
        {
            ticket_=std::make_shared<std::string>(pJson["ticket"].asString());
        }
    }
    if(pJson.isMember("openness"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["openness"].isNull())
        {
            openness_=std::make_shared<std::string>(pJson["openness"].asString());
        }
    }
    if(pJson.isMember("pic1"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["pic1"].isNull())
        {
            pic1_=std::make_shared<std::string>(pJson["pic1"].asString());
        }
    }
    if(pJson.isMember("pic2"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["pic2"].isNull())
        {
            pic2_=std::make_shared<std::string>(pJson["pic2"].asString());
        }
    }
    if(pJson.isMember("pic3"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["pic3"].isNull())
        {
            pic3_=std::make_shared<std::string>(pJson["pic3"].asString());
        }
    }
    if(pJson.isMember("location"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["location"].isNull())
        {
            location_=std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if(pJson.isMember("lat"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["lat"].isNull())
        {
            lat_=std::make_shared<std::string>(pJson["lat"].asString());
        }
    }
    if(pJson.isMember("lng"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["lng"].isNull())
        {
            lng_=std::make_shared<std::string>(pJson["lng"].asString());
        }
    }
}

const int32_t &Detail::getValueOfSid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(sid_)
        return *sid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Detail::getSid() const noexcept
{
    return sid_;
}
void Detail::setSid(const int32_t &pSid) noexcept
{
    sid_ = std::make_shared<int32_t>(pSid);
    dirtyFlag_[0] = true;
}
const typename Detail::PrimaryKeyType & Detail::getPrimaryKey() const
{
    assert(sid_);
    return *sid_;
}

const std::string &Detail::getValueOfIntro() const noexcept
{
    const static std::string defaultValue = std::string();
    if(intro_)
        return *intro_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getIntro() const noexcept
{
    return intro_;
}
void Detail::setIntro(const std::string &pIntro) noexcept
{
    intro_ = std::make_shared<std::string>(pIntro);
    dirtyFlag_[1] = true;
}
void Detail::setIntro(std::string &&pIntro) noexcept
{
    intro_ = std::make_shared<std::string>(std::move(pIntro));
    dirtyFlag_[1] = true;
}

const std::string &Detail::getValueOfTel() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tel_)
        return *tel_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getTel() const noexcept
{
    return tel_;
}
void Detail::setTel(const std::string &pTel) noexcept
{
    tel_ = std::make_shared<std::string>(pTel);
    dirtyFlag_[2] = true;
}
void Detail::setTel(std::string &&pTel) noexcept
{
    tel_ = std::make_shared<std::string>(std::move(pTel));
    dirtyFlag_[2] = true;
}

const std::string &Detail::getValueOfConsumption() const noexcept
{
    const static std::string defaultValue = std::string();
    if(consumption_)
        return *consumption_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getConsumption() const noexcept
{
    return consumption_;
}
void Detail::setConsumption(const std::string &pConsumption) noexcept
{
    consumption_ = std::make_shared<std::string>(pConsumption);
    dirtyFlag_[3] = true;
}
void Detail::setConsumption(std::string &&pConsumption) noexcept
{
    consumption_ = std::make_shared<std::string>(std::move(pConsumption));
    dirtyFlag_[3] = true;
}

const std::string &Detail::getValueOfTraffic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(traffic_)
        return *traffic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getTraffic() const noexcept
{
    return traffic_;
}
void Detail::setTraffic(const std::string &pTraffic) noexcept
{
    traffic_ = std::make_shared<std::string>(pTraffic);
    dirtyFlag_[4] = true;
}
void Detail::setTraffic(std::string &&pTraffic) noexcept
{
    traffic_ = std::make_shared<std::string>(std::move(pTraffic));
    dirtyFlag_[4] = true;
}

const std::string &Detail::getValueOfTicket() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ticket_)
        return *ticket_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getTicket() const noexcept
{
    return ticket_;
}
void Detail::setTicket(const std::string &pTicket) noexcept
{
    ticket_ = std::make_shared<std::string>(pTicket);
    dirtyFlag_[5] = true;
}
void Detail::setTicket(std::string &&pTicket) noexcept
{
    ticket_ = std::make_shared<std::string>(std::move(pTicket));
    dirtyFlag_[5] = true;
}

const std::string &Detail::getValueOfOpenness() const noexcept
{
    const static std::string defaultValue = std::string();
    if(openness_)
        return *openness_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getOpenness() const noexcept
{
    return openness_;
}
void Detail::setOpenness(const std::string &pOpenness) noexcept
{
    openness_ = std::make_shared<std::string>(pOpenness);
    dirtyFlag_[6] = true;
}
void Detail::setOpenness(std::string &&pOpenness) noexcept
{
    openness_ = std::make_shared<std::string>(std::move(pOpenness));
    dirtyFlag_[6] = true;
}

const std::string &Detail::getValueOfPic1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pic1_)
        return *pic1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getPic1() const noexcept
{
    return pic1_;
}
void Detail::setPic1(const std::string &pPic1) noexcept
{
    pic1_ = std::make_shared<std::string>(pPic1);
    dirtyFlag_[7] = true;
}
void Detail::setPic1(std::string &&pPic1) noexcept
{
    pic1_ = std::make_shared<std::string>(std::move(pPic1));
    dirtyFlag_[7] = true;
}

const std::string &Detail::getValueOfPic2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pic2_)
        return *pic2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getPic2() const noexcept
{
    return pic2_;
}
void Detail::setPic2(const std::string &pPic2) noexcept
{
    pic2_ = std::make_shared<std::string>(pPic2);
    dirtyFlag_[8] = true;
}
void Detail::setPic2(std::string &&pPic2) noexcept
{
    pic2_ = std::make_shared<std::string>(std::move(pPic2));
    dirtyFlag_[8] = true;
}

const std::string &Detail::getValueOfPic3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pic3_)
        return *pic3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getPic3() const noexcept
{
    return pic3_;
}
void Detail::setPic3(const std::string &pPic3) noexcept
{
    pic3_ = std::make_shared<std::string>(pPic3);
    dirtyFlag_[9] = true;
}
void Detail::setPic3(std::string &&pPic3) noexcept
{
    pic3_ = std::make_shared<std::string>(std::move(pPic3));
    dirtyFlag_[9] = true;
}

const std::string &Detail::getValueOfLocation() const noexcept
{
    const static std::string defaultValue = std::string();
    if(location_)
        return *location_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getLocation() const noexcept
{
    return location_;
}
void Detail::setLocation(const std::string &pLocation) noexcept
{
    location_ = std::make_shared<std::string>(pLocation);
    dirtyFlag_[10] = true;
}
void Detail::setLocation(std::string &&pLocation) noexcept
{
    location_ = std::make_shared<std::string>(std::move(pLocation));
    dirtyFlag_[10] = true;
}

const std::string &Detail::getValueOfLat() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lat_)
        return *lat_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getLat() const noexcept
{
    return lat_;
}
void Detail::setLat(const std::string &pLat) noexcept
{
    lat_ = std::make_shared<std::string>(pLat);
    dirtyFlag_[11] = true;
}
void Detail::setLat(std::string &&pLat) noexcept
{
    lat_ = std::make_shared<std::string>(std::move(pLat));
    dirtyFlag_[11] = true;
}

const std::string &Detail::getValueOfLng() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lng_)
        return *lng_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Detail::getLng() const noexcept
{
    return lng_;
}
void Detail::setLng(const std::string &pLng) noexcept
{
    lng_ = std::make_shared<std::string>(pLng);
    dirtyFlag_[12] = true;
}
void Detail::setLng(std::string &&pLng) noexcept
{
    lng_ = std::make_shared<std::string>(std::move(pLng));
    dirtyFlag_[12] = true;
}

void Detail::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Detail::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "sid",
        "intro",
        "tel",
        "consumption",
        "traffic",
        "ticket",
        "openness",
        "pic1",
        "pic2",
        "pic3",
        "location",
        "lat",
        "lng"
    };
    return inCols;
}

void Detail::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getSid())
        {
            binder << getValueOfSid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIntro())
        {
            binder << getValueOfIntro();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTel())
        {
            binder << getValueOfTel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getConsumption())
        {
            binder << getValueOfConsumption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTraffic())
        {
            binder << getValueOfTraffic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTicket())
        {
            binder << getValueOfTicket();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOpenness())
        {
            binder << getValueOfOpenness();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPic1())
        {
            binder << getValueOfPic1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPic2())
        {
            binder << getValueOfPic2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPic3())
        {
            binder << getValueOfPic3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getLocation())
        {
            binder << getValueOfLocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLat())
        {
            binder << getValueOfLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLng())
        {
            binder << getValueOfLng();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Detail::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Detail::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getSid())
        {
            binder << getValueOfSid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIntro())
        {
            binder << getValueOfIntro();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTel())
        {
            binder << getValueOfTel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getConsumption())
        {
            binder << getValueOfConsumption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTraffic())
        {
            binder << getValueOfTraffic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTicket())
        {
            binder << getValueOfTicket();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOpenness())
        {
            binder << getValueOfOpenness();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPic1())
        {
            binder << getValueOfPic1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPic2())
        {
            binder << getValueOfPic2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPic3())
        {
            binder << getValueOfPic3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getLocation())
        {
            binder << getValueOfLocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLat())
        {
            binder << getValueOfLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLng())
        {
            binder << getValueOfLng();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Detail::toJson() const
{
    Json::Value ret;
    if(getSid())
    {
        ret["sid"]=getValueOfSid();
    }
    else
    {
        ret["sid"]=Json::Value();
    }
    if(getIntro())
    {
        ret["intro"]=getValueOfIntro();
    }
    else
    {
        ret["intro"]=Json::Value();
    }
    if(getTel())
    {
        ret["tel"]=getValueOfTel();
    }
    else
    {
        ret["tel"]=Json::Value();
    }
    if(getConsumption())
    {
        ret["consumption"]=getValueOfConsumption();
    }
    else
    {
        ret["consumption"]=Json::Value();
    }
    if(getTraffic())
    {
        ret["traffic"]=getValueOfTraffic();
    }
    else
    {
        ret["traffic"]=Json::Value();
    }
    if(getTicket())
    {
        ret["ticket"]=getValueOfTicket();
    }
    else
    {
        ret["ticket"]=Json::Value();
    }
    if(getOpenness())
    {
        ret["openness"]=getValueOfOpenness();
    }
    else
    {
        ret["openness"]=Json::Value();
    }
    if(getPic1())
    {
        ret["pic1"]=getValueOfPic1();
    }
    else
    {
        ret["pic1"]=Json::Value();
    }
    if(getPic2())
    {
        ret["pic2"]=getValueOfPic2();
    }
    else
    {
        ret["pic2"]=Json::Value();
    }
    if(getPic3())
    {
        ret["pic3"]=getValueOfPic3();
    }
    else
    {
        ret["pic3"]=Json::Value();
    }
    if(getLocation())
    {
        ret["location"]=getValueOfLocation();
    }
    else
    {
        ret["location"]=Json::Value();
    }
    if(getLat())
    {
        ret["lat"]=getValueOfLat();
    }
    else
    {
        ret["lat"]=Json::Value();
    }
    if(getLng())
    {
        ret["lng"]=getValueOfLng();
    }
    else
    {
        ret["lng"]=Json::Value();
    }
    return ret;
}

Json::Value Detail::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getSid())
            {
                ret[pMasqueradingVector[0]]=getValueOfSid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIntro())
            {
                ret[pMasqueradingVector[1]]=getValueOfIntro();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTel())
            {
                ret[pMasqueradingVector[2]]=getValueOfTel();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getConsumption())
            {
                ret[pMasqueradingVector[3]]=getValueOfConsumption();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTraffic())
            {
                ret[pMasqueradingVector[4]]=getValueOfTraffic();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTicket())
            {
                ret[pMasqueradingVector[5]]=getValueOfTicket();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getOpenness())
            {
                ret[pMasqueradingVector[6]]=getValueOfOpenness();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPic1())
            {
                ret[pMasqueradingVector[7]]=getValueOfPic1();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getPic2())
            {
                ret[pMasqueradingVector[8]]=getValueOfPic2();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPic3())
            {
                ret[pMasqueradingVector[9]]=getValueOfPic3();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getLocation())
            {
                ret[pMasqueradingVector[10]]=getValueOfLocation();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getLat())
            {
                ret[pMasqueradingVector[11]]=getValueOfLat();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getLng())
            {
                ret[pMasqueradingVector[12]]=getValueOfLng();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getSid())
    {
        ret["sid"]=getValueOfSid();
    }
    else
    {
        ret["sid"]=Json::Value();
    }
    if(getIntro())
    {
        ret["intro"]=getValueOfIntro();
    }
    else
    {
        ret["intro"]=Json::Value();
    }
    if(getTel())
    {
        ret["tel"]=getValueOfTel();
    }
    else
    {
        ret["tel"]=Json::Value();
    }
    if(getConsumption())
    {
        ret["consumption"]=getValueOfConsumption();
    }
    else
    {
        ret["consumption"]=Json::Value();
    }
    if(getTraffic())
    {
        ret["traffic"]=getValueOfTraffic();
    }
    else
    {
        ret["traffic"]=Json::Value();
    }
    if(getTicket())
    {
        ret["ticket"]=getValueOfTicket();
    }
    else
    {
        ret["ticket"]=Json::Value();
    }
    if(getOpenness())
    {
        ret["openness"]=getValueOfOpenness();
    }
    else
    {
        ret["openness"]=Json::Value();
    }
    if(getPic1())
    {
        ret["pic1"]=getValueOfPic1();
    }
    else
    {
        ret["pic1"]=Json::Value();
    }
    if(getPic2())
    {
        ret["pic2"]=getValueOfPic2();
    }
    else
    {
        ret["pic2"]=Json::Value();
    }
    if(getPic3())
    {
        ret["pic3"]=getValueOfPic3();
    }
    else
    {
        ret["pic3"]=Json::Value();
    }
    if(getLocation())
    {
        ret["location"]=getValueOfLocation();
    }
    else
    {
        ret["location"]=Json::Value();
    }
    if(getLat())
    {
        ret["lat"]=getValueOfLat();
    }
    else
    {
        ret["lat"]=Json::Value();
    }
    if(getLng())
    {
        ret["lng"]=getValueOfLng();
    }
    else
    {
        ret["lng"]=Json::Value();
    }
    return ret;
}

bool Detail::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("sid"))
    {
        if(!validJsonOfField(0, "sid", pJson["sid"], err, true))
            return false;
    }
    else
    {
        err="The sid column cannot be null";
        return false;
    }
    if(pJson.isMember("intro"))
    {
        if(!validJsonOfField(1, "intro", pJson["intro"], err, true))
            return false;
    }
    else
    {
        err="The intro column cannot be null";
        return false;
    }
    if(pJson.isMember("tel"))
    {
        if(!validJsonOfField(2, "tel", pJson["tel"], err, true))
            return false;
    }
    else
    {
        err="The tel column cannot be null";
        return false;
    }
    if(pJson.isMember("consumption"))
    {
        if(!validJsonOfField(3, "consumption", pJson["consumption"], err, true))
            return false;
    }
    else
    {
        err="The consumption column cannot be null";
        return false;
    }
    if(pJson.isMember("traffic"))
    {
        if(!validJsonOfField(4, "traffic", pJson["traffic"], err, true))
            return false;
    }
    else
    {
        err="The traffic column cannot be null";
        return false;
    }
    if(pJson.isMember("ticket"))
    {
        if(!validJsonOfField(5, "ticket", pJson["ticket"], err, true))
            return false;
    }
    else
    {
        err="The ticket column cannot be null";
        return false;
    }
    if(pJson.isMember("openness"))
    {
        if(!validJsonOfField(6, "openness", pJson["openness"], err, true))
            return false;
    }
    else
    {
        err="The openness column cannot be null";
        return false;
    }
    if(pJson.isMember("pic1"))
    {
        if(!validJsonOfField(7, "pic1", pJson["pic1"], err, true))
            return false;
    }
    else
    {
        err="The pic1 column cannot be null";
        return false;
    }
    if(pJson.isMember("pic2"))
    {
        if(!validJsonOfField(8, "pic2", pJson["pic2"], err, true))
            return false;
    }
    else
    {
        err="The pic2 column cannot be null";
        return false;
    }
    if(pJson.isMember("pic3"))
    {
        if(!validJsonOfField(9, "pic3", pJson["pic3"], err, true))
            return false;
    }
    else
    {
        err="The pic3 column cannot be null";
        return false;
    }
    if(pJson.isMember("location"))
    {
        if(!validJsonOfField(10, "location", pJson["location"], err, true))
            return false;
    }
    else
    {
        err="The location column cannot be null";
        return false;
    }
    if(pJson.isMember("lat"))
    {
        if(!validJsonOfField(11, "lat", pJson["lat"], err, true))
            return false;
    }
    else
    {
        err="The lat column cannot be null";
        return false;
    }
    if(pJson.isMember("lng"))
    {
        if(!validJsonOfField(12, "lng", pJson["lng"], err, true))
            return false;
    }
    else
    {
        err="The lng column cannot be null";
        return false;
    }
    return true;
}
bool Detail::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Detail::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("sid"))
    {
        if(!validJsonOfField(0, "sid", pJson["sid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("intro"))
    {
        if(!validJsonOfField(1, "intro", pJson["intro"], err, false))
            return false;
    }
    if(pJson.isMember("tel"))
    {
        if(!validJsonOfField(2, "tel", pJson["tel"], err, false))
            return false;
    }
    if(pJson.isMember("consumption"))
    {
        if(!validJsonOfField(3, "consumption", pJson["consumption"], err, false))
            return false;
    }
    if(pJson.isMember("traffic"))
    {
        if(!validJsonOfField(4, "traffic", pJson["traffic"], err, false))
            return false;
    }
    if(pJson.isMember("ticket"))
    {
        if(!validJsonOfField(5, "ticket", pJson["ticket"], err, false))
            return false;
    }
    if(pJson.isMember("openness"))
    {
        if(!validJsonOfField(6, "openness", pJson["openness"], err, false))
            return false;
    }
    if(pJson.isMember("pic1"))
    {
        if(!validJsonOfField(7, "pic1", pJson["pic1"], err, false))
            return false;
    }
    if(pJson.isMember("pic2"))
    {
        if(!validJsonOfField(8, "pic2", pJson["pic2"], err, false))
            return false;
    }
    if(pJson.isMember("pic3"))
    {
        if(!validJsonOfField(9, "pic3", pJson["pic3"], err, false))
            return false;
    }
    if(pJson.isMember("location"))
    {
        if(!validJsonOfField(10, "location", pJson["location"], err, false))
            return false;
    }
    if(pJson.isMember("lat"))
    {
        if(!validJsonOfField(11, "lat", pJson["lat"], err, false))
            return false;
    }
    if(pJson.isMember("lng"))
    {
        if(!validJsonOfField(12, "lng", pJson["lng"], err, false))
            return false;
    }
    return true;
}
bool Detail::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Detail::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
