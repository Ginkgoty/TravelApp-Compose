/**
 *
 *  PicText.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PicText.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::travelapp;

const std::string PicText::Cols::_ptid = "ptid";
const std::string PicText::Cols::_uid = "uid";
const std::string PicText::Cols::_cover = "cover";
const std::string PicText::Cols::_imagelist = "imagelist";
const std::string PicText::Cols::_title = "title";
const std::string PicText::Cols::_text = "text";
const std::string PicText::Cols::_datetime = "datetime";
const std::string PicText::Cols::_favcount = "favcount";
const std::string PicText::primaryKeyName = "ptid";
const bool PicText::hasPrimaryKey = true;
const std::string PicText::tableName = "pic_text";

const std::vector<typename PicText::MetaData> PicText::metaData_={
{"ptid","int32_t","integer",4,0,1,1},
{"uid","int32_t","integer",4,0,0,1},
{"cover","std::string","text",0,0,0,1},
{"imagelist","std::string","text",0,0,0,1},
{"title","std::string","character varying",255,0,0,1},
{"text","std::string","character varying",255,0,0,1},
{"datetime","::trantor::Date","date",0,0,0,1},
{"favcount","int32_t","integer",4,0,0,1}
};
const std::string &PicText::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PicText::PicText(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>(r["ptid"].as<int32_t>());
        }
        if(!r["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>(r["uid"].as<int32_t>());
        }
        if(!r["cover"].isNull())
        {
            cover_=std::make_shared<std::string>(r["cover"].as<std::string>());
        }
        if(!r["imagelist"].isNull())
        {
            imagelist_=std::make_shared<std::string>(r["imagelist"].as<std::string>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["text"].isNull())
        {
            text_=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["datetime"].isNull())
        {
            auto daysStr = r["datetime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["favcount"].isNull())
        {
            favcount_=std::make_shared<int32_t>(r["favcount"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            ptid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            uid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            cover_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            imagelist_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            text_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            favcount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

PicText::PicText(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            cover_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            imagelist_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            text_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            favcount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

PicText::PicText(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("ptid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("cover"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["cover"].isNull())
        {
            cover_=std::make_shared<std::string>(pJson["cover"].asString());
        }
    }
    if(pJson.isMember("imagelist"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["imagelist"].isNull())
        {
            imagelist_=std::make_shared<std::string>(pJson["imagelist"].asString());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("text"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["text"].isNull())
        {
            text_=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("datetime"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["datetime"].isNull())
        {
            auto daysStr = pJson["datetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("favcount"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["favcount"].isNull())
        {
            favcount_=std::make_shared<int32_t>((int32_t)pJson["favcount"].asInt64());
        }
    }
}

void PicText::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            cover_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            imagelist_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            text_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            favcount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void PicText::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("ptid"))
    {
        if(!pJson["ptid"].isNull())
        {
            ptid_=std::make_shared<int32_t>((int32_t)pJson["ptid"].asInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<int32_t>((int32_t)pJson["uid"].asInt64());
        }
    }
    if(pJson.isMember("cover"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["cover"].isNull())
        {
            cover_=std::make_shared<std::string>(pJson["cover"].asString());
        }
    }
    if(pJson.isMember("imagelist"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["imagelist"].isNull())
        {
            imagelist_=std::make_shared<std::string>(pJson["imagelist"].asString());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("text"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["text"].isNull())
        {
            text_=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("datetime"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["datetime"].isNull())
        {
            auto daysStr = pJson["datetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            datetime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("favcount"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["favcount"].isNull())
        {
            favcount_=std::make_shared<int32_t>((int32_t)pJson["favcount"].asInt64());
        }
    }
}

const int32_t &PicText::getValueOfPtid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(ptid_)
        return *ptid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PicText::getPtid() const noexcept
{
    return ptid_;
}
void PicText::setPtid(const int32_t &pPtid) noexcept
{
    ptid_ = std::make_shared<int32_t>(pPtid);
    dirtyFlag_[0] = true;
}
const typename PicText::PrimaryKeyType & PicText::getPrimaryKey() const
{
    assert(ptid_);
    return *ptid_;
}

const int32_t &PicText::getValueOfUid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(uid_)
        return *uid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PicText::getUid() const noexcept
{
    return uid_;
}
void PicText::setUid(const int32_t &pUid) noexcept
{
    uid_ = std::make_shared<int32_t>(pUid);
    dirtyFlag_[1] = true;
}

const std::string &PicText::getValueOfCover() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cover_)
        return *cover_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PicText::getCover() const noexcept
{
    return cover_;
}
void PicText::setCover(const std::string &pCover) noexcept
{
    cover_ = std::make_shared<std::string>(pCover);
    dirtyFlag_[2] = true;
}
void PicText::setCover(std::string &&pCover) noexcept
{
    cover_ = std::make_shared<std::string>(std::move(pCover));
    dirtyFlag_[2] = true;
}

const std::string &PicText::getValueOfImagelist() const noexcept
{
    const static std::string defaultValue = std::string();
    if(imagelist_)
        return *imagelist_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PicText::getImagelist() const noexcept
{
    return imagelist_;
}
void PicText::setImagelist(const std::string &pImagelist) noexcept
{
    imagelist_ = std::make_shared<std::string>(pImagelist);
    dirtyFlag_[3] = true;
}
void PicText::setImagelist(std::string &&pImagelist) noexcept
{
    imagelist_ = std::make_shared<std::string>(std::move(pImagelist));
    dirtyFlag_[3] = true;
}

const std::string &PicText::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PicText::getTitle() const noexcept
{
    return title_;
}
void PicText::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[4] = true;
}
void PicText::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[4] = true;
}

const std::string &PicText::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(text_)
        return *text_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PicText::getText() const noexcept
{
    return text_;
}
void PicText::setText(const std::string &pText) noexcept
{
    text_ = std::make_shared<std::string>(pText);
    dirtyFlag_[5] = true;
}
void PicText::setText(std::string &&pText) noexcept
{
    text_ = std::make_shared<std::string>(std::move(pText));
    dirtyFlag_[5] = true;
}

const ::trantor::Date &PicText::getValueOfDatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(datetime_)
        return *datetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PicText::getDatetime() const noexcept
{
    return datetime_;
}
void PicText::setDatetime(const ::trantor::Date &pDatetime) noexcept
{
    datetime_ = std::make_shared<::trantor::Date>(pDatetime.roundDay());
    dirtyFlag_[6] = true;
}

const int32_t &PicText::getValueOfFavcount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(favcount_)
        return *favcount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PicText::getFavcount() const noexcept
{
    return favcount_;
}
void PicText::setFavcount(const int32_t &pFavcount) noexcept
{
    favcount_ = std::make_shared<int32_t>(pFavcount);
    dirtyFlag_[7] = true;
}

void PicText::updateId(const uint64_t id)
{
}

const std::vector<std::string> &PicText::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "ptid",
        "uid",
        "cover",
        "imagelist",
        "title",
        "text",
        "datetime",
        "favcount"
    };
    return inCols;
}

void PicText::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCover())
        {
            binder << getValueOfCover();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImagelist())
        {
            binder << getValueOfImagelist();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFavcount())
        {
            binder << getValueOfFavcount();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PicText::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void PicText::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPtid())
        {
            binder << getValueOfPtid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCover())
        {
            binder << getValueOfCover();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImagelist())
        {
            binder << getValueOfImagelist();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFavcount())
        {
            binder << getValueOfFavcount();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PicText::toJson() const
{
    Json::Value ret;
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getCover())
    {
        ret["cover"]=getValueOfCover();
    }
    else
    {
        ret["cover"]=Json::Value();
    }
    if(getImagelist())
    {
        ret["imagelist"]=getValueOfImagelist();
    }
    else
    {
        ret["imagelist"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["datetime"]=getDatetime()->toDbStringLocal();
    }
    else
    {
        ret["datetime"]=Json::Value();
    }
    if(getFavcount())
    {
        ret["favcount"]=getValueOfFavcount();
    }
    else
    {
        ret["favcount"]=Json::Value();
    }
    return ret;
}

Json::Value PicText::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getPtid())
            {
                ret[pMasqueradingVector[0]]=getValueOfPtid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUid())
            {
                ret[pMasqueradingVector[1]]=getValueOfUid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCover())
            {
                ret[pMasqueradingVector[2]]=getValueOfCover();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getImagelist())
            {
                ret[pMasqueradingVector[3]]=getValueOfImagelist();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[4]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getText())
            {
                ret[pMasqueradingVector[5]]=getValueOfText();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDatetime())
            {
                ret[pMasqueradingVector[6]]=getDatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getFavcount())
            {
                ret[pMasqueradingVector[7]]=getValueOfFavcount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getPtid())
    {
        ret["ptid"]=getValueOfPtid();
    }
    else
    {
        ret["ptid"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getCover())
    {
        ret["cover"]=getValueOfCover();
    }
    else
    {
        ret["cover"]=Json::Value();
    }
    if(getImagelist())
    {
        ret["imagelist"]=getValueOfImagelist();
    }
    else
    {
        ret["imagelist"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["datetime"]=getDatetime()->toDbStringLocal();
    }
    else
    {
        ret["datetime"]=Json::Value();
    }
    if(getFavcount())
    {
        ret["favcount"]=getValueOfFavcount();
    }
    else
    {
        ret["favcount"]=Json::Value();
    }
    return ret;
}

bool PicText::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(0, "ptid", pJson["ptid"], err, true))
            return false;
    }
    else
    {
        err="The ptid column cannot be null";
        return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(1, "uid", pJson["uid"], err, true))
            return false;
    }
    else
    {
        err="The uid column cannot be null";
        return false;
    }
    if(pJson.isMember("cover"))
    {
        if(!validJsonOfField(2, "cover", pJson["cover"], err, true))
            return false;
    }
    else
    {
        err="The cover column cannot be null";
        return false;
    }
    if(pJson.isMember("imagelist"))
    {
        if(!validJsonOfField(3, "imagelist", pJson["imagelist"], err, true))
            return false;
    }
    else
    {
        err="The imagelist column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(4, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(5, "text", pJson["text"], err, true))
            return false;
    }
    else
    {
        err="The text column cannot be null";
        return false;
    }
    if(pJson.isMember("datetime"))
    {
        if(!validJsonOfField(6, "datetime", pJson["datetime"], err, true))
            return false;
    }
    else
    {
        err="The datetime column cannot be null";
        return false;
    }
    if(pJson.isMember("favcount"))
    {
        if(!validJsonOfField(7, "favcount", pJson["favcount"], err, true))
            return false;
    }
    else
    {
        err="The favcount column cannot be null";
        return false;
    }
    return true;
}
bool PicText::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PicText::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("ptid"))
    {
        if(!validJsonOfField(0, "ptid", pJson["ptid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(1, "uid", pJson["uid"], err, false))
            return false;
    }
    if(pJson.isMember("cover"))
    {
        if(!validJsonOfField(2, "cover", pJson["cover"], err, false))
            return false;
    }
    if(pJson.isMember("imagelist"))
    {
        if(!validJsonOfField(3, "imagelist", pJson["imagelist"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(4, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(5, "text", pJson["text"], err, false))
            return false;
    }
    if(pJson.isMember("datetime"))
    {
        if(!validJsonOfField(6, "datetime", pJson["datetime"], err, false))
            return false;
    }
    if(pJson.isMember("favcount"))
    {
        if(!validJsonOfField(7, "favcount", pJson["favcount"], err, false))
            return false;
    }
    return true;
}
bool PicText::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PicText::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
