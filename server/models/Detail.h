/**
 *
 *  Detail.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace travelapp
{

class Detail
{
  public:
    struct Cols
    {
        static const std::string _sid;
        static const std::string _intro;
        static const std::string _tel;
        static const std::string _consumption;
        static const std::string _traffic;
        static const std::string _ticket;
        static const std::string _openness;
        static const std::string _pic1;
        static const std::string _pic2;
        static const std::string _pic3;
        static const std::string _location;
        static const std::string _lat;
        static const std::string _lng;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Detail(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Detail(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Detail(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Detail() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column sid  */
    ///Get the value of the column sid, returns the default value if the column is null
    const int32_t &getValueOfSid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSid() const noexcept;
    ///Set the value of the column sid
    void setSid(const int32_t &pSid) noexcept;

    /**  For column intro  */
    ///Get the value of the column intro, returns the default value if the column is null
    const std::string &getValueOfIntro() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIntro() const noexcept;
    ///Set the value of the column intro
    void setIntro(const std::string &pIntro) noexcept;
    void setIntro(std::string &&pIntro) noexcept;

    /**  For column tel  */
    ///Get the value of the column tel, returns the default value if the column is null
    const std::string &getValueOfTel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTel() const noexcept;
    ///Set the value of the column tel
    void setTel(const std::string &pTel) noexcept;
    void setTel(std::string &&pTel) noexcept;

    /**  For column consumption  */
    ///Get the value of the column consumption, returns the default value if the column is null
    const std::string &getValueOfConsumption() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getConsumption() const noexcept;
    ///Set the value of the column consumption
    void setConsumption(const std::string &pConsumption) noexcept;
    void setConsumption(std::string &&pConsumption) noexcept;

    /**  For column traffic  */
    ///Get the value of the column traffic, returns the default value if the column is null
    const std::string &getValueOfTraffic() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTraffic() const noexcept;
    ///Set the value of the column traffic
    void setTraffic(const std::string &pTraffic) noexcept;
    void setTraffic(std::string &&pTraffic) noexcept;

    /**  For column ticket  */
    ///Get the value of the column ticket, returns the default value if the column is null
    const std::string &getValueOfTicket() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTicket() const noexcept;
    ///Set the value of the column ticket
    void setTicket(const std::string &pTicket) noexcept;
    void setTicket(std::string &&pTicket) noexcept;

    /**  For column openness  */
    ///Get the value of the column openness, returns the default value if the column is null
    const std::string &getValueOfOpenness() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOpenness() const noexcept;
    ///Set the value of the column openness
    void setOpenness(const std::string &pOpenness) noexcept;
    void setOpenness(std::string &&pOpenness) noexcept;

    /**  For column pic1  */
    ///Get the value of the column pic1, returns the default value if the column is null
    const std::string &getValueOfPic1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPic1() const noexcept;
    ///Set the value of the column pic1
    void setPic1(const std::string &pPic1) noexcept;
    void setPic1(std::string &&pPic1) noexcept;

    /**  For column pic2  */
    ///Get the value of the column pic2, returns the default value if the column is null
    const std::string &getValueOfPic2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPic2() const noexcept;
    ///Set the value of the column pic2
    void setPic2(const std::string &pPic2) noexcept;
    void setPic2(std::string &&pPic2) noexcept;

    /**  For column pic3  */
    ///Get the value of the column pic3, returns the default value if the column is null
    const std::string &getValueOfPic3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPic3() const noexcept;
    ///Set the value of the column pic3
    void setPic3(const std::string &pPic3) noexcept;
    void setPic3(std::string &&pPic3) noexcept;

    /**  For column location  */
    ///Get the value of the column location, returns the default value if the column is null
    const std::string &getValueOfLocation() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLocation() const noexcept;
    ///Set the value of the column location
    void setLocation(const std::string &pLocation) noexcept;
    void setLocation(std::string &&pLocation) noexcept;

    /**  For column lat  */
    ///Get the value of the column lat, returns the default value if the column is null
    const std::string &getValueOfLat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLat() const noexcept;
    ///Set the value of the column lat
    void setLat(const std::string &pLat) noexcept;
    void setLat(std::string &&pLat) noexcept;

    /**  For column lng  */
    ///Get the value of the column lng, returns the default value if the column is null
    const std::string &getValueOfLng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLng() const noexcept;
    ///Set the value of the column lng
    void setLng(const std::string &pLng) noexcept;
    void setLng(std::string &&pLng) noexcept;


    static size_t getColumnNumber() noexcept {  return 13;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Detail>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Detail>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> sid_;
    std::shared_ptr<std::string> intro_;
    std::shared_ptr<std::string> tel_;
    std::shared_ptr<std::string> consumption_;
    std::shared_ptr<std::string> traffic_;
    std::shared_ptr<std::string> ticket_;
    std::shared_ptr<std::string> openness_;
    std::shared_ptr<std::string> pic1_;
    std::shared_ptr<std::string> pic2_;
    std::shared_ptr<std::string> pic3_;
    std::shared_ptr<std::string> location_;
    std::shared_ptr<std::string> lat_;
    std::shared_ptr<std::string> lng_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[13]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where sid = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where sid = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "sid,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "intro,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "tel,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "consumption,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "traffic,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "ticket,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "openness,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "pic1,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "pic2,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "pic3,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "location,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "lat,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "lng,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[11])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[12])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace travelapp
} // namespace drogon_model
